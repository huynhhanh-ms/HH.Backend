// <auto-generated />
using System;
using System.Collections.Generic;
using HH.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HH.Persistence.Migrations
{
    [DbContext(typeof(HhDatabaseContext))]
    [Migration("20241103133917_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "account_status", new[] { "active", "inactive", "suspended" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "admin", "user", "guest", "staff", "manager" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "weighing_status", new[] { "new", "processing", "done" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HH.Domain.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("AccountId")
                        .HasName("account_pkey");

                    b.ToTable("account");
                });

            modelBuilder.Entity("HH.Domain.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Debtor")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("debtor");

                    b.Property<DateTime?>("ExpenseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expense_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ExpenseTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("expense_type_id");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("expense_pkey");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("SessionId");

                    b.ToTable("expense");
                });

            modelBuilder.Entity("HH.Domain.Models.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("expense_type_pkey");

                    b.ToTable("expense_type");
                });

            modelBuilder.Entity("HH.Domain.Models.FuelImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("ImportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("import_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("ImportPrice")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("import_price");

                    b.Property<decimal>("ImportVolume")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("import_volume");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int?>("TankId")
                        .HasColumnType("integer")
                        .HasColumnName("tank_id");

                    b.Property<decimal?>("TotalCost")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("total_cost");

                    b.Property<decimal?>("TotalSalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_sale_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<decimal?>("VolumeUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasColumnName("volume_used")
                        .HasDefaultValueSql("0");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("fuel_import_pkey");

                    b.HasIndex("TankId");

                    b.ToTable("fuel_import");
                });

            modelBuilder.Entity("HH.Domain.Models.FuelImportSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("FuelImportId")
                        .HasColumnType("integer")
                        .HasColumnName("fuel_import_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<decimal?>("VolumeUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasColumnName("volume_used")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id")
                        .HasName("fuel_import_session_pkey");

                    b.HasIndex(new[] { "FuelImportId" }, "idx_fuel_import_session_fuel_import_id");

                    b.HasIndex(new[] { "SessionId" }, "idx_fuel_import_session_session_id");

                    b.ToTable("fuel_import_session");
                });

            modelBuilder.Entity("HH.Domain.Models.FuelPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int?>("FuelTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("fuel_type_id");

                    b.Property<decimal>("ImportPrice")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("import_price");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("SellingPrice")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("selling_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("fuel_price_pkey");

                    b.HasIndex("FuelTypeId");

                    b.ToTable("fuel_price");
                });

            modelBuilder.Entity("HH.Domain.Models.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("fuel_type_pkey");

                    b.ToTable("fuel_type");
                });

            modelBuilder.Entity("HH.Domain.Models.Lubricant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("integer")
                        .HasColumnName("current_stock");

                    b.Property<DateTime?>("ImportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("import_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("ImportPrice")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("import_price");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("SellPrice")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("sell_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("lubricant_pkey");

                    b.ToTable("lubricant");
                });

            modelBuilder.Entity("HH.Domain.Models.PetrolPump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('session_detail_id_seq'::regclass)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<decimal>("EndVolume")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("end_volume");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<decimal?>("Revenue")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("revenue");

                    b.Property<int?>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<decimal>("StartVolume")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("start_volume");

                    b.Property<int?>("TankId")
                        .HasColumnType("integer")
                        .HasColumnName("tank_id");

                    b.Property<int?>("TotalVolume")
                        .HasColumnType("integer")
                        .HasColumnName("total_volume");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("session_detail_pkey");

                    b.HasIndex("SessionId");

                    b.HasIndex("TankId");

                    b.ToTable("petrol_pump");
                });

            modelBuilder.Entity("HH.Domain.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CashForChange")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("cash_for_change");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Processing'::character varying");

                    b.Property<decimal?>("TotalExpense")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("total_expense");

                    b.Property<decimal?>("TotalRevenue")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("total_revenue");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("session_pkey");

                    b.ToTable("session");
                });

            modelBuilder.Entity("HH.Domain.Models.Tank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Capacity")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("capacity");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("CurrentVolume")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("current_volume");

                    b.Property<decimal?>("Height")
                        .HasPrecision(13, 2)
                        .HasColumnType("numeric(13,2)")
                        .HasColumnName("height");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("tank_pkey");

                    b.HasIndex("TypeId");

                    b.ToTable("tank");
                });

            modelBuilder.Entity("HH.Domain.Models.TriggerLog", b =>
                {
                    b.Property<int?>("Counter")
                        .HasColumnType("integer")
                        .HasColumnName("counter");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('test_trigger_id_seq'::regclass)");

                    b.ToTable("trigger_log");
                });

            modelBuilder.Entity("HH.Domain.Models.WeighingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("customer_name")
                        .HasDefaultValueSql("'Vô Danh'::character varying");

                    b.Property<string>("GoodsType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("goods_type");

                    b.Property<int?>("GoodsWeight")
                        .HasColumnType("integer")
                        .HasColumnName("goods_weight");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("license_plate");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTime?>("TotalWeighingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("total_weighing_date");

                    b.Property<int?>("TotalWeight")
                        .HasColumnType("integer")
                        .HasColumnName("total_weight");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<List<string>>("VehicleImages")
                        .HasColumnType("text[]")
                        .HasColumnName("vehicle_images");

                    b.Property<DateTime?>("VehicleWeighingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("vehicle_weighing_date");

                    b.Property<int?>("VehicleWeight")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_weight");

                    b.HasKey("Id")
                        .HasName("weighing_history_pkey");

                    b.ToTable("weighing_history");
                });

            modelBuilder.Entity("HH.Domain.Models.Expense", b =>
                {
                    b.HasOne("HH.Domain.Models.ExpenseType", "ExpenseType")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTypeId")
                        .HasConstraintName("expense_expense_type_id_fkey");

                    b.HasOne("HH.Domain.Models.Session", "Session")
                        .WithMany("Expenses")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("expense_session_id_fkey");

                    b.Navigation("ExpenseType");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("HH.Domain.Models.FuelImport", b =>
                {
                    b.HasOne("HH.Domain.Models.Tank", "Tank")
                        .WithMany("FuelImports")
                        .HasForeignKey("TankId")
                        .HasConstraintName("fuel_import_tank_id_fkey");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("HH.Domain.Models.FuelImportSession", b =>
                {
                    b.HasOne("HH.Domain.Models.FuelImport", "FuelImport")
                        .WithMany("FuelImportSessions")
                        .HasForeignKey("FuelImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fuel_import_session_fuel_import_id_fkey");

                    b.HasOne("HH.Domain.Models.Session", "Session")
                        .WithMany("FuelImportSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fuel_import_session_session_id_fkey");

                    b.Navigation("FuelImport");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("HH.Domain.Models.FuelPrice", b =>
                {
                    b.HasOne("HH.Domain.Models.FuelType", "FuelType")
                        .WithMany("FuelPrices")
                        .HasForeignKey("FuelTypeId")
                        .HasConstraintName("fuel_price_fuel_type_id_fkey");

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("HH.Domain.Models.PetrolPump", b =>
                {
                    b.HasOne("HH.Domain.Models.Session", "Session")
                        .WithMany("PetrolPumps")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("session_detail_session_id_fkey");

                    b.HasOne("HH.Domain.Models.Tank", "Tank")
                        .WithMany("PetrolPumps")
                        .HasForeignKey("TankId")
                        .HasConstraintName("session_detail_tank_id_fkey");

                    b.Navigation("Session");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("HH.Domain.Models.Tank", b =>
                {
                    b.HasOne("HH.Domain.Models.FuelType", "Type")
                        .WithMany("Tanks")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("tank_type_id_fkey");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HH.Domain.Models.ExpenseType", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("HH.Domain.Models.FuelImport", b =>
                {
                    b.Navigation("FuelImportSessions");
                });

            modelBuilder.Entity("HH.Domain.Models.FuelType", b =>
                {
                    b.Navigation("FuelPrices");

                    b.Navigation("Tanks");
                });

            modelBuilder.Entity("HH.Domain.Models.Session", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("FuelImportSessions");

                    b.Navigation("PetrolPumps");
                });

            modelBuilder.Entity("HH.Domain.Models.Tank", b =>
                {
                    b.Navigation("FuelImports");

                    b.Navigation("PetrolPumps");
                });
#pragma warning restore 612, 618
        }
    }
}
